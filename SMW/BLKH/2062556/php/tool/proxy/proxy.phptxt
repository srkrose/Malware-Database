<?php 
header("Access-Control-Allow-Headers: *");
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Credentials: true");
//header("Content-Type: application/json");
$authorizationToken = "Authorization";
$postmarkToken = "X-Postmark-Server-Token";
$getResponseToken = "X-Auth-Token";
$json = file_get_contents("php://input");
$htmlDecode = html_entity_decode($json);
$data = json_decode($htmlDecode, true);
if (empty($data)) {
    parse_str($json, $data);
}

switch($_SERVER["REQUEST_METHOD"])
{
case "GET": 
    $data = (empty($data)) ? $_GET : $data;
    break;
case "POST": 
    $data = (empty($data)) ? $_POST : $data;
    break;
case "PUT":
    $data = (empty($data)) ? $_PUT : $data;
    break;
case "DELETE": 
    $data = (empty($data)) ? $_REQUEST : $data;
    break;
default:
}
if (!empty($data)){
	
	if ( isset($data["host"]) ) 
		$url = $data["host"];
	
    $url = empty($url) ? $_REQUEST["host"] : $url;
	
	if ( isset($data["dataType"]) ) 
		$dataType = $data["dataType"];
	
    $dataType = empty($dataType) ? $_REQUEST["dataType"] : $dataType;
    $host = $url;
    unset($data["host"]);
    $data_string="";
	if ($dataType != "json")
	{
		foreach($data as $key => $value) { 
			$data_string .= $key.'='.urlencode($value).'&'; 	
		}
	}
    $data_string = rtrim($data_string, '&');
    $headers = getallheaders();
    $request_headers = array();
    if ($dataType == "json"){
      array_push($request_headers, "Content-Type:application/json");
      array_push($request_headers, "Accept:application/json");
    }
    $hasAuthorizationHeader = !empty($headers[$authorizationToken]);
    if ($hasAuthorizationHeader){
        array_push($request_headers, "$authorizationToken:". $headers[$authorizationToken]);
    }
    $hasPostmarkToken = !empty($headers[$postmarkToken]);
    if ($hasPostmarkToken) {
        array_push($request_headers, "$postmarkToken:". $headers[$postmarkToken]);
    }
    $hasGetResponseToken = !empty($headers[$getResponseToken]);
    if ($hasGetResponseToken) {
        array_push($request_headers, "$getResponseToken:". $headers[$getResponseToken]);
    }
    $connection = curl_init();
    curl_setopt($connection, CURLOPT_RETURNTRANSFER, 1);
    if (!empty($request_headers)) {
         curl_setopt($connection, CURLOPT_HTTPHEADER, $request_headers);
    }
    switch ($_SERVER["REQUEST_METHOD"]){
       case "GET":
        $query_string = http_build_query($data);
        $url .= (!empty($query_string)) ? "?". $query_string : "";
        curl_setopt($connection, CURLOPT_CUSTOMREQUEST, "GET");
        break;
       case "POST":
        curl_setopt($connection, CURLOPT_POST, count($data));
        if ($dataType == "json"){
             curl_setopt($connection, CURLOPT_POSTFIELDS, $json);
        }
        else {
            curl_setopt($connection, CURLOPT_POSTFIELDS, $data_string);
        }
        break;
       case "DELETE":
            curl_setopt($connection, CURLOPT_CUSTOMREQUEST, "DELETE");
            if ($dataType == "json"){
                curl_setopt($connection, CURLOPT_POSTFIELDS, $json);
           }
           else {
               curl_setopt($connection, CURLOPT_POSTFIELDS, $data_string);
           }
        break;
    }
    curl_setopt($connection, CURLOPT_URL, $url);
    $result = curl_exec($connection);
    curl_close($connection);
	 
    //echo "redirect data - ". $data_string. " redirect result - ". $result. " url - ". $url. " ". $request_type. " request has data.";
    echo $result; // "host parameter ". $host. " ". $result; //. " ". ($hasAuthorizationHeader ? "has authorization header" : "no authorization header present"). " ". $headers["Authorization"]. " ". $headers["Content-Type"]. " ". $request_type. " ". count($headers);
}
else{
    echo $data. "no data was submitted to proxy.";
}
?>
